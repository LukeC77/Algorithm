class Solution {
public:
    int binarySearch(vector<int>& array, int target, int len) {
        int L = 0;
        int R = len - 1;
        while (L <= R) {
            int M = L + (R - L) / 2;
            if (array[M] < target) {
                L = M + 1;
            } else if (array[M] == target){
                return M;
            } else {
                R = M - 1;
            }
        }
        return -1;
    }

    vector<int> solveQueries(vector<int>& nums, vector<int>& queries) {
        unordered_map <int, vector<int>> table;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            auto it = table.find(nums[i]);
            if (it == table.end()) {
                table.emplace(nums[i], vector<int> {i});
            } else {
                it->second.push_back(i);
            }
        }
        // Test: print hash table
        // for (const auto &pair : table) {
        //     cout << pair.first << ": ";
        //     for (int num : pair.second) {
        //         cout << num << " ";
        //     }
        //     cout << endl;
        // }

        int m = queries.size();
        vector<int> answer(m, 0);
        for (int i = 0; i < m; i++) {
            int key = nums[queries[i]];
            vector<int> &array = table[key];
            int len = array.size();
            // if num[i] is unique, value -1
            if (len == 1) {
                answer[i] = -1;
            } else {
                int id = binarySearch(array, queries[i], len);
                int prev = id - 1;
                int post = id + 1;
                if (prev < 0) prev = len - 1;
                if (post >= len) post = 0;

                //calculate distance
                int prevDist, postDist;
                prevDist = postDist = 0;
                if (prev < id) {
                    prevDist = array[id] - array[prev];
                } else {
                    prevDist = array[id] - 0 + n - array[prev];
                }
                if (post > id) {
                    postDist = array[post] - array[id];
                } else {
                    postDist = n - array[id] + array[post] - 0;
                }
                answer[i] = min(prevDist, postDist);
            }
        }

        return answer;
    }
    

};
