这个问题要求你实现一个基于时间的键值存储系统，它能够存储同一个键在不同时间戳下的多个值，并在查询时返回指定时间戳之前的最新值。下面详细解释这个问题的含义：
功能要求
初始化：创建一个空的时间键值存储。
存储数据（set 方法）：允许为同一个键在不同时间戳存储不同的值。每次调用 set 时，时间戳必须严格递增（即后存储的时间戳要比之前的大）。
查询数据（get 方法）：给定一个键和时间戳，返回该键在这个时间戳之前（或恰好是这个时间戳）存储的最新值。如果指定时间戳之前没有该键的值，返回空字符串 ""。


实际应用场景
这种数据结构适用于需要追踪数据变更历史，并按时间点回溯的场景。常见场景包括：
版本控制
例如：代码版本管理系统（如 Git）、文档协作工具（如 Google Docs）需要记录每个版本的内容，用户可以随时查看某个时间点的历史版本。
示例：用户编辑文档时，每次保存对应一个时间戳，查询某个时间戳的文档内容时，返回该时间点的最新版本。

时序数据存储
传感器数据、股票价格、用户行为日志等按时间顺序产生的数据，需要按时间点快速查询。
示例：智能设备每分钟上报一次温度数据，查询 “2025 年 5 月 19 日 10:00” 的温度时，返回该时间点或之前最近的测量值。

数据库事务回滚
数据库需要支持按时间点恢复数据（如 MySQL 的时间点恢复），此时需要记录每个数据版本的时间戳。

缓存系统
某些缓存需要根据时间戳失效或返回旧版本（如 CDN 缓存的版本控制）。

class TimeMap {
    unordered_map<string, vector<pair<int, string>>> m;
public:
    TimeMap() {}
    
    void set(string key, string value, int timestamp) {
        m[key].emplace_back(timestamp, value);
    }
    
    string get(string key, int timestamp) {
        const vector<pair<int, string>> &pairs = m[key];
        int len = pairs.size();
        //1 3 5 7 9 11 13 15 17
        // 12
        int l = 0;
        int r = len - 1;
        string result = "";
        // cout << "l=" << l << endl;
        while (l <= r) {
            int mid = (r - l) / 2 + l;
            if (pairs[mid].first == timestamp) {
                result = pairs[mid].second;
                break;
            } else if (pairs[mid].first < timestamp) {
                result = pairs[mid].second;
                l = mid + 1;
            } else if (pairs[mid].first > timestamp) {
                r = mid - 1;
            }
        }

        return result;

    }
};

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap* obj = new TimeMap();
 * obj->set(key,value,timestamp);
 * string param_2 = obj->get(key,timestamp);
 */
