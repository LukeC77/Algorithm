class Solution {
public:
    int searchRow(vector<vector<int>>& matrix, int target, int row_num) {
        int top = 0;
        int bottom = row_num - 1;
        int result;
        while (top <= bottom) {
            int mid = (bottom - top) / 2 + top;
            if (matrix[mid][0] == target) {
                return mid;
            } else if (matrix[mid][0] > target) {
                bottom = mid - 1;
            } else if (matrix[mid][0] < target) {
                top = mid + 1;
            }
        }
        //bottom is always = top - 1 after while loop, so we can use this
        //to replace min(top, bottom)
        int rowIdx = bottom;
        if (rowIdx < 0) {
            return -1;
        } else {
            return rowIdx;
        }

        /*
        edge case: <1, min(b,t) return -1
        1  
        10 
        20 
        40 
        50 
        */
    }

    bool searchCol(vector<int> & array, int target, int col_num) {
        int left = 0;
        int right = col_num - 1;
        while (left <= right) {
            int mid = (right - left) / 2 + left;
            if (array[mid] == target) {
                return true;
            } else if (array[mid] < target) {
                left = mid + 1;
            } else if (array[mid] > target) {
                right = mid - 1;
            }
        }
        return false;
    }

    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row_num = matrix.size();
        int col_num = matrix[0].size();

        int rowIdx = searchRow(matrix, target, row_num);
        // cout << rowIdx;

        if (rowIdx == -1) {
            return false;
        } else {
            return searchCol(matrix[rowIdx], target, col_num);
        }
    }
};
