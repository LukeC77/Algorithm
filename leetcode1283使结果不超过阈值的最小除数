class Solution {
public:
    bool midLEThreshold(vector<int>& nums, int threshold, int divisor) {
        int len = nums.size();
        int sum = 0;
        for (int i = 0; i < len; i++) {
            sum += (nums[i] + divisor - 1) / divisor;
        }
        return (sum <= threshold);
    }

    int smallestDivisor(vector<int>& nums, int threshold) {
        /*
        eg2:
        2/3 = 1
        3/3 = 1
        5/3 = 2
        7/3 = 3
        11/3 = 4
        1+1+2+3+4=11
        */
        int len = nums.size();
        //find the largest elem in nums
        int max = nums[0];
        for (int i = 1; i < len; i++) {
            if (nums[i] > max) {
                max = nums[i];
            }
        }

        int L = 1;
        int R = max;

        while (L <= R) {
            int mid = L + (R - L) / 2;
            if (midLEThreshold(nums, threshold, mid)) {
                R = mid - 1;
            } else {
                L = mid + 1;
            }
        }

        return L;
    }
};
