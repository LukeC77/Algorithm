class Solution {
public:

    int upperBound(int left, int right, vector<int>& array, int target, int curr) {
        while (left <= right) {
            int M = left + (right - left) / 2;
            if (curr + array[M] <= target) {
                left = M + 1;
            } else {
                right = M - 1;
            }
        }
        return right;
    }

    int lowerBound(int left, int right, vector<int>& array, int target, int curr) {
        while (left <= right) {
            int M = left + (right - left) / 2;
            if (curr + array[M] < target) {
                left = M + 1;
            } else {
                right = M - 1;
            }
        }
        return left;
    }

    /* all entries > upper
    7 upper=6
    L
    R
    M
    upper return -1

    7 lower=5
    L
    R
    M
    lower return 0
    */

    /* all entries < lower
    4 upper=6
    L
    R
    M
    upper return 0

    4 lower=5
    L
    R
    M
    lower return 1
    */


    long long countFairPairs(vector<int>& nums, int lower, int upper) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        long long count = 0;
        for (int i = 0; i < n; i++) {
            int start = lowerBound(i + 1, n - 1, nums, lower, nums[i]);
            int end = upperBound(i + 1, n - 1, nums, upper, nums[i]);
            count += end - start + 1;
        }

        return count;
    }
};
