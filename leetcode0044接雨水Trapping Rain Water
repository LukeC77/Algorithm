class Solution {
public:
    int trap(vector<int>& height) {
        //prefix[0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3]
        //suffix[3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1]
        //height[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
        //amount[0, 0, 1, 0, 1, 2, 1, 0, 0, 1, 0, 0]
        int len = height.size();
        vector<int> prefix(len, 0);
        vector<int> suffix(len, 0);
        int result = 0;
        
        //calculate prefix
        int prefix_max = 0;
        for (int i = 0; i < len; i++) { 
            if (prefix_max < height[i]) {
                prefix_max = height[i];
            }
            prefix[i] = prefix_max;
        }

        //calculate prefix
        int suffix_max = 0;
        for (int i = len - 1; i >= 0; i--) {
            if (suffix_max < height[i]) {
                suffix_max = height[i];
            }
            suffix[i] = suffix_max;
        }

        for (int i = 0; i < len; i++) {
            int amount = min(prefix[i], suffix[i]) - height[i];
            result += amount;
        }

        return result;
    }
};
