class Solution {
public:
    int upperBound(vector<int>& array, int target) {
        int len = array.size();
        int L = 0;
        int R = len - 1;
        while (L <= R) {
            int M = L + (R - L) / 2;
            if (array[M] <= target) {
                L = M + 1;
            } else {
                R = M - 1;
            }
        }
        return R;
    }

    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        int m = queries.size();

        //calculate the prefix sum
        vector<int> prefixSum (n, 0);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum = sum + nums[i];
            prefixSum[i] = sum;
        }

        vector<int> result(m, 0);
        for (int i = 0; i < m; i++) {
            result[i] = upperBound(prefixSum, queries[i]) + 1;
        }

        return result;
    }
};
